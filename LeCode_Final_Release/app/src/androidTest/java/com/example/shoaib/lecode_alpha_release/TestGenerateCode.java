package com.example.shoaib.lecode_alpha_release;

import android.app.Instrumentation;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Environment;
import android.test.ActivityInstrumentationTestCase2;
import android.test.suitebuilder.annotation.MediumTest;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;

/**
 * Created by shoaib on 4/16/2015.
 * Edited by shoaib and ChaoLin
 */
public class TestGenerateCode extends ActivityInstrumentationTestCase2<GenerateCodeUI> {
//Testclass to test GenerateCodeUI and Generate Code class both on Unit level and System level

    //Start of Declaration of Objects for testing
    private GenerateCodeUI activity;
    private FileOutputStream fileOutputStream;

    public ArrayList<String> Name;
    public ArrayList<String> Prev;
    public ArrayList<String> Next;
    public ArrayList<String> True;
    public ArrayList<String> False;
    public ArrayList<String> Expression;
    public ArrayList<String> nType;

    String Reference_Generated_Code_4_1 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\tint x;\n" +
                    "\tint y;\n" +
                    "\t\n" +
                    "\tif ( x > 3 ) {\n" +
                    "\t\ty = 3;\n" +
                    "\t}\n" +
                    "\telse {\n" +
                    "\t\ty = 5;\n" +
                    "\t}\n\n" +
                    "\treturn 0;\n" +
                    "}\n"; // Reference code for Test test_R_4_1_1

    String Reference_Generated_Code_4_1_2 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\t\n" +
                    "\tif (  ) {\n" +
                    "\t\t;\n" +
                    "\t}\n" +
                    "\telse {\n" +
                    "\t\t;\n" +
                    "\t}\n\n" +
                    "\treturn 0;\n" +
                    "}\n"; // Reference code for Test test_R_4_1_2

    String Reference_Generated_Code_4_2 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\tint y;\n" +
                    "\t\n" +
                    "\ty = 3;\n" +
                    "\treturn 0;\n" +
                    "}\n"; // Reference code for Test test_R_4_2_1

    String Reference_Generated_Code_4_2_2 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\t\n" +
                    "\t;\n" +
                    "\treturn 0;\n" +
                    "}\n";// Reference code for Test test_R_4_2_2

    String Reference_Generated_Code_4_3 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\t\n" +
                    "\treturn 0;\n" +
                    "}\n";// Reference code for Test test_R_4_3_1

    String Reference_Generated_Code_4_3_2 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\t\n" +
                    "\treturn 0;\n" +
                    "}\n";// Reference code for Test test_R_4_3_2

    String Reference_Generated_Code_9_1 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\tint x;\n" +
                    "\t\n" +
                    "\twhile ( x < 8 ) {\n" +
                    "\t\tx = x + 1;\n" +
                    "\t}\n\n" +
                    "\treturn 0;\n" +
                    "}\n";// Reference code for Test test_R_9_1

    String Reference_Generated_Code_9_1_2 =
            "//This Code is generated by LeCode App\n" +
                    "#include \"iostream\" \n" +
                    "using namespace std;\n" +
                    "int main() {\n\n" +
                    "\t\n" +
                    "\twhile (  ) {\n" +
                    "\t\t;\n" +
                    "\t}\n\n" +
                    "\treturn 0;\n" +
                    "}\n";// Reference code for Test test_R_9_1
    //End of Declaration of Variables for testing

    public TestGenerateCode(){ //Constructor with object creation and instantiation of tests for GenerateCodeUI
        super(GenerateCodeUI.class);
        Name = new ArrayList();
        Prev = new ArrayList();
        Next = new ArrayList();
        True = new ArrayList();
        False = new ArrayList();
        Expression = new ArrayList();
        nType = new ArrayList();
    }

    @Override
    public void setUp() throws Exception{
        super.setUp();
        setActivityInitialTouchMode(false); //Disable touch by user
        activity = getActivity(); //Get the activity for testing
        storeSampleImages(); //Store reference images within the device so that they can be used for testing
    }

    private void storeSampleImages() { //Function to Store reference images within the device so that they can be used for testing
        String extStorageDir = Environment.getExternalStorageDirectory().toString(); //get external storage location
        try{
            //Store test_4_1_2.png to external storage
            Bitmap bm = BitmapFactory.decodeResource(activity.getResources(), R.drawable.test_4_1_2);
            File file = new File(extStorageDir+"/LeCoder_Image", "test_4_1_2.png");
            fileOutputStream = new FileOutputStream(file);
            bm.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
            fileOutputStream.flush();
            fileOutputStream.close();
            //Save test_4_2_2.png to external storage
            bm = BitmapFactory.decodeResource(activity.getResources(), R.drawable.test_4_2_2);
            file = new File(extStorageDir+"/LeCoder_Image", "test_4_2_2.png");
            fileOutputStream = new FileOutputStream(file);
            bm.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
            fileOutputStream.flush();
            fileOutputStream.close();
            //Save test_4_3_2.png to external storage
            bm = BitmapFactory.decodeResource(activity.getResources(), R.drawable.test_4_3_2);
            file = new File(extStorageDir+"/LeCoder_Image", "test_4_3_2.png");
            fileOutputStream = new FileOutputStream(file);
            bm.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
            fileOutputStream.flush();
            fileOutputStream.close();
            //Save while_node.png to external storage
            bm = BitmapFactory.decodeResource(activity.getResources(), R.drawable.while_node);
            file = new File(extStorageDir+"/LeCoder_Image", "while_node.png");
            fileOutputStream = new FileOutputStream(file);
            bm.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
            fileOutputStream.flush();
            fileOutputStream.close();
        }catch(Exception e){
            Log.v("Error", "Can not save files on ex");
        }
    }

    public void getDataStructureforR_4_1(){ //Function to create data structure for GenerateCodeUI and GenerateCode class for Test R_4_1
        // Simple If with two code statements, one for else and other for if
        Name.add("if1");
        Prev.add("start");
        Next.add("end") ;
        True.add("c1");
        False.add("c2");
        Expression.add("x > 3");
        nType.add("If");

        Name.add("c1");
        Prev.add("if1");
        Next.add("NULL");
        True.add("NULL");
        False.add("NULL");
        Expression.add("y = 3");
        nType.add("code");

        Name.add("c2");
        Prev.add("if1");
        Next.add("NULL");
        True.add("NULL");
        False.add("NULL");
        Expression.add("y = 5");
        nType.add("code");

        Name.add("end");
        Prev.add("if1");
        Next.add("NULL");
        True.add("NULL");
        False.add("NULL");
        Expression.add("NULL");
        nType.add("end");

        Name.add("start");
        Prev.add("NULL");
        Next.add("if1");
        True.add("NULL");
        False.add("NULL");
        Expression.add("NULL");
        nType.add("start");

    }

    public void getDataStructureforR_4_2(){//Function to create data structure for GenerateCodeUI and GenerateCode class for Test R_4_2
        //Flowchart with one code statement, one start state and one end state

        Name.add("c1");
        Prev.add("start");
        Next.add("end");
        True.add("NULL");
        False.add("NULL");
        Expression.add("y = 3");
        nType.add("code");

        Name.add("end");
        Prev.add("c1");
        Next.add("NULL");
        True.add("NULL");
        False.add("NULL");
        Expression.add("NULL");
        nType.add("end");

        Name.add("start");
        Prev.add("NULL");
        Next.add("c1");
        True.add("NULL");
        False.add("NULL");
        Expression.add("NULL");
        nType.add("start");

    }

    public void getDataStructureforR_4_3(){//Function to create data structure for GenerateCodeUI and GenerateCode class for Test R_4_3
        //Flowchart with one start state and one end state
        Name.add("end");
        Prev.add("start");
        Next.add("NULL");
        True.add("NULL");
        False.add("NULL");
        Expression.add("NULL");
        nType.add("end");

        Name.add("start");
        Prev.add("NULL");
        Next.add("end");
        True.add("NULL");
        False.add("NULL");
        Expression.add("NULL");
        nType.add("start");

    }

    void getDataStructureforR_9(){//Function to create data structure for GenerateCodeUI and GenerateCode class for Test R_9
        // Flowchart with one while loop with one code statement inside it, one start state and one end state.


        Name       .add("end");
        Prev       .add("while1");
        Next       .add("NULL");
        True       .add("NULL");
        False      .add("NULL");
        Expression .add("NULL");
        nType      .add("end");

        Name      .add("start");
        Prev      .add("NULL");
        Next      .add("while1");
        True      .add("NULL");
        False     .add("NULL");
        Expression.add("NULL");
        nType     .add("start");

        Name       .add("while1");
        Prev       .add("start");
        Next       .add("end");
        True       .add("c1");
        False      .add("NULL");
        Expression .add("x < 8");
        nType      .add("While");

        Name      .add("c1");
        Prev      .add("while1");
        Next      .add("NULL");
        True      .add("NULL");
        False     .add("NULL");
        Expression.add("x = x + 1");
        nType     .add("code");

        //n[0].display();
    }

    @MediumTest
    public void test_R_4_1_1() throws Exception{ //Test for Requirement R4.1
        Log.d("Started the Testing\n", " ");
        getDataStructureforR_4_1(); //get reference data structure for this test
        activity.mGenerateCode.setDataStructure(Name, Prev, Next, True, False, Expression, nType);
        //set the data structure in generate code class for processing
        String Generated_Code = activity.mGenerateCode.generate_code(); //getting the Generated code from GenerateCode class
        assertEquals("References is :" + Reference_Generated_Code_4_1 + "\nActual :"
                + Generated_Code + "\nThe End\n", Reference_Generated_Code_4_1, Generated_Code );
        //check if Generated code from the app is same as the expected code


    }

    @MediumTest
    public void test_R_4_2_1() throws Exception{
        Log.d("Started the Testing\n", " ");
        getDataStructureforR_4_2(); //get reference data structure for this test
        activity.mGenerateCode.setDataStructure(Name, Prev, Next, True, False, Expression, nType);
        //set the data structure in generate code class for processing
        String Generated_Code = activity.mGenerateCode.generate_code(); //getting the Generated code from GenerateCode class
        assertEquals("References is :" + Reference_Generated_Code_4_2 + "\nActual :"
                + Generated_Code + "\nThe End\n", Reference_Generated_Code_4_2, Generated_Code );
        //check if Generated code from the app is same as the expected code

    }

    @MediumTest
    public void test_R_4_3_1() throws Exception{
        Log.d("Started the Testing\n", " ");
        getDataStructureforR_4_3(); //get reference data structure for this test
        activity.mGenerateCode.setDataStructure(Name, Prev, Next, True, False, Expression, nType);
        //set the data structure in generate code class for processing
        String Generated_Code = activity.mGenerateCode.generate_code(); //getting the Generated code from GenerateCode class
        assertEquals("References is :" + Reference_Generated_Code_4_3 + "\nActual :"
                + Generated_Code + "\nThe End\n", Reference_Generated_Code_4_3, Generated_Code );
        //check if Generated code from the app is same as the expected code


    }



    @MediumTest
    public void test_R_9_1() throws Exception{
        Log.d("Started the Testing\n", " ");
        getDataStructureforR_9(); //get reference data structure for this test
        activity.mGenerateCode.setDataStructure(Name, Prev, Next, True, False, Expression, nType);
        //set the data structure in generate code class for processing
        String Generated_Code = activity.mGenerateCode.generate_code(); //getting the Generated code from GenerateCode class
        assertEquals("References is :" + Reference_Generated_Code_9_1 + "\nActual :"
                + Generated_Code + "\nThe End\n", Reference_Generated_Code_9_1, Generated_Code );
        //check if Generated code from the app is same as the expected code


    }


    @MediumTest
    public void test_R_4_1_2() throws Exception{
        //Generate the file's path
        String imagePath = Environment.getExternalStorageDirectory()+"/LeCoder_Image/test_4_1_2.png";
        //Load the file and process it
        activity.loadImageFile(imagePath);
        activity.processImage();
        //Generate the nodes and construct the graph
        activity.generateNodes();
        activity.generateGraph();
        activity.generateDataStructure();

        activity.printAllNodes();
        //Give the data to GenerateCode to generate the code
        activity.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                activity.setGenerateCode();
                String actuallyCode = activity.getGenerateCode();
                Log.v("Expected Code: ", Reference_Generated_Code_4_1_2);
                Log.v("Actually Code: ", actuallyCode);
                assertEquals("Compare code for test_4_1_2: ", Reference_Generated_Code_4_1_2, actuallyCode);
                //check if Generated code from the app is same as the expected code
            }
        });


    }

    @MediumTest
    public void test_R_4_2_2() throws Exception{
        //Generate the file's path
        String imagePath = Environment.getExternalStorageDirectory()+"/LeCoder_Image/test_4_2_2.png";
        //Load the file and process it
        activity.loadImageFile(imagePath);
        activity.processImage();
        //Generate the nodes and construct the graph
        activity.generateNodes();
        activity.generateGraph();
        activity.generateDataStructure();
        activity.printAllNodes();
        //Give the data to GenerateCode to generate the code
        activity.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                activity.setGenerateCode();
                String actuallyCode = activity.getGenerateCode();
                Log.v("Expected Code: ", Reference_Generated_Code_4_2_2);
                Log.v("Actually Code: ", actuallyCode);
                //Comapre the preferred code with the actually code
                assertEquals("Compare code for test_4_2_2: ", Reference_Generated_Code_4_2_2, actuallyCode);
                //check if Generated code from the app is same as the expected code
            }
        });
    }


    @MediumTest
    public void test_R_4_3_2() throws Exception{
        //Generate the file's path
        String imagePath = Environment.getExternalStorageDirectory()+"/LeCoder_Image/test_4_3_2.png";
        //Load the file and process it
        activity.loadImageFile(imagePath);
        activity.processImage();
        //Generate the nodes and construct the graph
        activity.generateNodes();
        activity.generateGraph();
        activity.generateDataStructure();
        //activity.printAllNodes();
        //Give the data to GenerateCode to generate the code
        activity.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                activity.setGenerateCode();
                String actuallyCode = activity.getGenerateCode(); //getting the Generated code from GenerateCode class
                Log.v("Expected Code: ", Reference_Generated_Code_4_3_2);
                Log.v("Actually Code: ", actuallyCode);
                //check if Generated code from the app is same as the expected code
                assertEquals("Compare code for test_4_3_2: ", Reference_Generated_Code_4_3_2, actuallyCode);
            }
        });

    }

    @MediumTest
    public void test_R_9_1_2() throws Exception{
        //Generate the file's path
        String imagePath = Environment.getExternalStorageDirectory()+"/LeCoder_Image/while_node.png";
        //Load the file and process it
        activity.loadImageFile(imagePath);
        activity.processImage();
        //Generate the nodes and construct the graph
        activity.generateNodes();
        activity.generateGraph();
        activity.generateDataStructure();
        //activity.printAllNodes();
        //Give the data to GenerateCode to generate the code
        activity.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                activity.setGenerateCode();
                String actuallyCode = activity.getGenerateCode(); //getting the Generated code from GenerateCode class
                Log.v("Expected Code: ", Reference_Generated_Code_9_1_2);
                Log.v("Actually Code: ", actuallyCode);
                //check if Generated code from the app is same as the expected code
                assertEquals("Compare code for test_9_1_2: ", Reference_Generated_Code_9_1_2, actuallyCode);
            }
        });

    }

    @MediumTest
    public void test_R_14_1() throws Exception {
        boolean check = false;
        getDataStructureforR_4_1(); //get reference data structure for this test
        activity.mGenerateCode.setDataStructure(Name, Prev, Next, True, False, Expression, nType);
        //set the data structure in generate code class for processing
        String Generated_Code = activity.mGenerateCode.generate_code(); //getting the Generated code from GenerateCode class
        //activity.setCodeTextView(Generated_Code);
        activity.setGenerated_Code(Generated_Code);
        activity.WriteToFile(); //Write the code to a cpp file

        File directory = Environment.getExternalStorageDirectory();
        File Expected_directory = new File(directory +  "/LeCode/"); //Getting expected location of the file

        String ExpectedFileName = "Generated_Code_0.cpp"; //Expected File na,e
        String actualTitle;
        for (File f : Expected_directory.listFiles()) { //Getting all the files in Lecode external storage directory
            if (f.isFile()) { //check if its a file
                actualTitle = f.getName();  //getTitle
                if (ExpectedFileName.equals(actualTitle)) { //if title is same as the expected title
                    check = true; //The file is found
                }
                else{
                    Log.d("Expected Location is : " +
                            ExpectedFileName, "Actual Location is : " + actualTitle );
                }

            }
        }

        assertTrue(check); //Assertion statement to see if the file is present in the expected directory after the code was generated
    }

    @MediumTest
    public void test_R_15(){
        Instrumentation.ActivityMonitor monitor = getInstrumentation().addMonitor(GenerateCodeUI.class.getName(), null, false);
        getDataStructureforR_4_1(); //get reference data structure for this test
        activity.mGenerateCode.setDataStructure(Name, Prev, Next, True, False, Expression, nType);
        //set the data structure in generate code class for processing
        String Generated_Code = activity.mGenerateCode.generate_code(); //getting the Generated code from GenerateCode class
        //activity.setCodeTextView(Generated_Code);
        activity.setGenerated_Code(Generated_Code);
        activity.WriteToFile();//Write the code to a cpp file
        activity.Prepare_Email();//Sets Email attributes


        // final Button EmailButton = (Button) activity.findViewById(R.id.button_EMail);
        //TouchUtils.clickView(this, EmailButton);

        GenerateCodeUI startedActivity = (GenerateCodeUI) monitor.waitForActivityWithTimeout(2000);
        //this.sendKeys(KeyEvent.KEYCODE_BACK);

        Intent Email = activity.getMyEmailClient(); //getting Email intent created by GenerateCodeUI
        String myFile = "file://" + Environment.getExternalStorageDirectory().toString() +
                "/LeCode/" + "Generated_Code_0.cpp"; //Expected file location
        //String Expected_File_Name = Uri.parse(myFile).toString();
        //String Expected_File_Name = myFile.toString();
        //String Actual_File_Name = Email.getParcelableExtra(Intent.EXTRA_STREAM).toString();
        Uri Expected_File_Name = Uri.parse(myFile);
        Uri Actual_File_Name = Email.getParcelableExtra(Intent.EXTRA_STREAM); //Actual file name
        assertEquals("Expected File and Actual File are not same Expected File is: " + Expected_File_Name + "\nActual" +
                        "name is: " + Actual_File_Name, Expected_File_Name,
                Actual_File_Name);
        //Check if the Actual file name is same as the expected file name

        String ActualEmailSubject = Email.getStringExtra(Intent.EXTRA_SUBJECT); //get Actual subject of the email
        String ExpectedEmailSubject = new String("Generated Code for Flowchart from Team LeCode"); //expected subject of the email
        assertEquals("Subject is not the same", ExpectedEmailSubject, ActualEmailSubject);
        //Check if the actual subject of the email is same as the expected subject of the email

        String ActualContent = Email.getStringExtra(Intent.EXTRA_TEXT); //Get Content of the email
        String ExpectedContent = new String("Please find attached the C++ code" +
                " for the flowchart");//Text for Email content

        assertEquals("Content is not the same", ActualContent, ExpectedContent);
        //Check if actual content of email is same as expected content of the email
       /* try {
            Thread.sleep(1000); //Wait for one second after clicks has been performed
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        this.sendKeys(KeyEvent.KEYCODE_BACK);
        try {
            Thread.sleep(1000); //Wait for one second after clicks has been performed
        } catch (InterruptedException e) {
            e.printStackTrace();
        }*/
    }
}

